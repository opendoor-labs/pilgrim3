// Comments in this doc are asserted in tests, do not change

/* file-comment */
syntax = "proto3";

package example;

/* message-comment */
message ExampleMessage {
    /* message-field-comment */
    string field = 1;

    /* message-oneof-comment */
    oneof one_of {
      /* message-oneof-field[0]-comment */
      string field2 = 2;
      /* message-oneof-field[1]-comment */
      string field3 = 3;
    }
}

/* enum-comment */
enum ExampleEnum {
    /* enum-val[0]-comment */
    val1 = 0;
    /* enum-val[1]-comment */
    val2 = 1;
}

message ExampleNestingScope {
    /* nested-message-comment */
    message ExampleNestedMessage {
        /* nested-message-field-comment */
        string field = 1;

        /* nested-message-oneof-comment */
        oneof one_of {
          /* nested-message-oneof-field[0]-comment */
          string field2 = 2;
          /* nested-message-oneof-field[1]-comment */
          string field3 = 3;
        }
    }

    /* nested-enum-comment */
    enum ExampleNestedEnum {
        /* nested-enum-val[0]-comment */
        val1 = 0;
        /* nested-enum-val[1]-comment */
        val2 = 1;
    }
}

/* service-comment */
service ExampleService {
    /* action-comment */
    rpc doAction (ExampleMessage) returns (ExampleNestingScope.ExampleNestedMessage) {}
}